using Microsoft.CodeAnalysis;

namespace JsonProviderGenerator
{
     [Generator]
     public class JsonCountriesClientGenerator : ISourceGenerator
     {
          public void Execute(GeneratorExecutionContext context)
          {
               // Find the main method
               var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

               // Build up the source code
               string source = $@"// <auto-generated/>
using Newtonsoft.Json;
using System.Net;
using System.Diagnostics.Metrics;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
 public partial class {mainMethod.ContainingType.Name}
     {{
    static readonly HttpClient client = new HttpClient();

    static async partial void FetchCountries<T>(string link, Action<T[]> onResponse) where T : IReturnToString
          {{
               Console.WriteLine(""Load..."");
               try
               {{
                    HttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(link);
                    HttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse();

                    if (myHttpWebResponse.StatusCode != HttpStatusCode.OK)
                         return;

                    Console.WriteLine(""\r\nResponse Status Code is OK and StatusDescription is: {{0}}\r\n"", myHttpWebResponse.StatusDescription);

                    var endpoint = new Uri(link);
                    var response = await client.GetAsync(endpoint);

                    myHttpWebResponse.Close();

                    if (response.IsSuccessStatusCode && onResponse != null)
                    {{
                         var result = await response.Content.ReadAsStringAsync();
                         T[] deserializedProduct = JsonConvert.DeserializeObject<T[]>(result);

                         if (deserializedProduct != null)
                              onResponse(deserializedProduct);
                    }}
               }}
               catch (WebException e)
               {{
                    Console.WriteLine(""\r\nWebException Raised.The following error occurred: {{ {{ 0}} }}"", e.Status);
               }}
               catch (Exception e)
               {{
                    Console.WriteLine(""\nThe following Exception was raised: {{ {{ 0}} }}"", e.Message);
               }}
}}
}}
}}
";
               var typeName = mainMethod.ContainingType.Name;

               // Add the source code to the compilation
               context.AddSource($"{typeName}.g.cs", source);
          }

          public void Initialize(GeneratorInitializationContext context)
          {
               // No initialization required for this one
          }
     }
}